@using System.Text.Json
@model pizzashop.repository.ViewModels.OrderDetailsView;
<div class="d-flex justify-content-between align-items-center">
    <div class="d-flex justify-content-start align-items-center">
        <div class="d-flex align-items-center justify-content-center p-1"
            style="background-color: #adc3e4; width: 60px; height: 60px;">
            <img src="~/images/icons/dinner-table.svg" width="42px" height="42px">
        </div>
        <div class="d-flex flex-column ps-2 fs-6">
            <span>@Model.Section</span>
            <span><b>Table:</b> @Model.Table</span>
        </div>
    </div>
    <input type="hidden" asp-for="CustomerId" id="CustomerId" />

    <div class="d-flex align-items-center justify-content-end gap-3 pointer">
        <div class="Order-Header-Btns" id="QR">
            <i class="bi bi-qr-code-scan"></i>
        </div>
        <div class="Order-Header-Btns pointer" id="customer-update">
            <i class="bi bi-person-lines-fill"></i>
        </div>
        <div class="Order-Header-Btns pointer" id="order-comment">
            <i class="bi bi-chat-left-text"></i>
        </div>
    </div>
</div>

<div class="w-100 pt-4">
    <div class="d-flex text-secondary">
        <div class="d-flex justify-content-start w-50">
            <h6><strong>Item</strong></h6>
        </div>
        <div class="d-flex justify-content-around align-items-center w-50">
            <h6><strong>Quantity</strong></h6>
            <h6><strong>Amount</strong></h6>
            <h6></h6>
        </div>
    </div>

    <div id="item-template" class="rounded border mb-2 d-none accordion-container" data-item-id="">
        <div class="d-flex">
            <div class="accordion d-flex flex-column justify-content-start gap-2 p-2 w-50">
                <button class="accordion-button collapsed p-2 bg-transparent border-0" type="button"
                    data-bs-toggle="collapse" data-bs-target="#collapse-template" aria-expanded="false"
                    aria-controls="collapse-template" style="width: fit-content;">
                    <strong class="ps-1 item-name">ItemName</strong>
                </button>

                <div id="collapse-template" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                    <div class="ps-1">
                        <ul class="mb-0">
                            <li>Example Modifier ₹10</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-around align-items-center flex-row w-50">
                <div class="d-flex align-items-center border rounded px-2 py-1">
                    <i class="bi bi-dash cursor-pointer item-quantity-decrease"></i>
                    <span class="mx-2 item-quantity">1</span>
                    <i class="bi bi-plus cursor-pointer item-quantity-increase"></i>
                </div>

                <div class="text-center">
                    <div class="fw-bold item-base-price">₹10</div>
                    <div class="text-muted small item-total-price"></div>
                </div>

                <i class="bi bi-trash text-muted fs-6 cursor-pointer remove-item"></i>
            </div>
        </div>
    </div>


    <div id="selected-items-container"></div>

</div>

<div class="border-bottom pt-3"></div>

<div class="text-secondary mt-2" id="order-summary-container">
    <div class="d-flex justify-content-between fs-6">
        <div class="fs-5">Sub Total:</div>
        <div class="fs-5" id="subtotal-value">0.00</div>
    </div>

    <div id="taxes-container">

    </div>
    <div class="d-flex justify-content-between fs-6">
        <div class="fs-5">Total</div>
        <div class="fs-5" id="total-value">0.00</div>
    </div>

    <div>

        <div class="d-flex justify-content-between">
            <div>Payment Method</div>
            <div class="d-flex flex-row gap-3 fs-6" style="font-weight: 500;">
                <div class="d-flex flex-row align-items-center gap-2">
                    <input type="radio" name="paymentMethod" id="Cash">
                    <label for="Cash">Cash</label>
                </div>
                <div class="d-flex flex-row align-items-center gap-2">
                    <input type="radio" name="paymentMethod" id="card">
                    <label for="card">Card</label>
                </div>
                <div class="d-flex flex-row align-items-center gap-2">
                    <input type="radio" name="paymentMethod" id="UPI">
                    <label for="UPI">UPI</label>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="mt-5 ps-5 d-flex flex-row gap-3 pb-3">
    <button type="button" class="btn p-3 w-100 btn-prime" id="Save-Order-Btn">Save</button>
    <button type="button" class="btn p-3 w-100 btn-border-prime" id="Complete-btn">Complete</button>
    <button type="button" class="btn p-3 w-100 btn-border-prime" id="Invoice-btn">Generate Invoice</button>
</div>

<div class="d-flex justify-content-end">
    <button type="button" class="btn p-3 Cancel-btn w-40 btn-border-prime" id="Cancel-btn">Cancel</button>
</div>
<script>
    (function () {
        const itemsDataFromModel = @Html.Raw(JsonSerializer.Serialize(Model.ItemsInOrder ?? new List<ItemDetailForOrder>()));

        var itemsToAdd = [];


        if (itemsDataFromModel && Array.isArray(itemsDataFromModel)) {

            itemsDataFromModel.forEach(item => {
                try {
                    const timestamp = Date.now();
                    let tempSelections = {
                        uniqueId: `${item.OrderToItemId}-${timestamp}`,
                        itemId: item.ItemId,
                        orderedItemId: item.OrderToItemId,
                        itemName: item.ItemName,
                        itemRate: item.ItemAmount,
                        quantity: item.ItemQuantity,
                        defaultTax: item.Isdefaulttax,
                        readyQuantity: item.ReadyQuantity,
                        tax: item.Taxpercentage,
                        groups: {}
                    };

                    if (item.ItemModifiers && Array.isArray(item.ItemModifiers)) {
                        item.ItemModifiers.forEach(mod => {

                            if (mod.Modifiergroupid != null && mod.ModifierId != null) {
                                const groupId = mod.Modifiergroupid;
                                const modifierId = mod.ModifierId;

                                if (!tempSelections.groups[groupId]) {
                                    tempSelections.groups[groupId] = {
                                        groupId: groupId,
                                        mappingId: mod.ItemModifierMappingId,
                                        groupName: mod.ModifierGroupName,
                                        minRequired: mod.MinRequired,
                                        maxAllowed: mod.MaxRequired,
                                        selectedModifiers: {}
                                    };
                                }

                                tempSelections.groups[groupId].selectedModifiers[modifierId] = {
                                    modifierId: modifierId,
                                    modifierName: mod.ModifierName,
                                    rate: mod.ModifierRate
                                };
                            }
                        });
                    }

                    itemsToAdd.push(tempSelections);

                } catch (err) {
                    console.error("JavaScript Error processing item data:", item, err);
                }
            });
        }


        if (typeof window.addOrderItemsFromPartial === 'function') {
            window.addOrderItemsFromPartial(itemsToAdd);
        } else {
            console.error("PartialView Script: Parent function 'addOrderItemsFromPartial' was not found.");
        }

    })(); 
</script>
