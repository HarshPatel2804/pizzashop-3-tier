@{
    Layout = "_Layout";
    ViewData["Title"] = "Dashboard";
}
@await Html.PartialAsync("_Toast")

<section style="min-height: 100vh; background-color: #fafafa;">
    <div class="ms-3 me-4" id="">
        <div class="d-flex justify-content-between gap-4">

            <div class="h1 mt-3 " style="color: rgb(1, 123, 217); font-weight: bold">
                Dashboard
            </div>

            <select style="width: 12rem;" id="dateDropdown" class="form-control mt-3">
                <option value="Today">Today</option>
                <option value="Last7Days">Last 7 Days</option>
                <option value="Last30Days">Last 30 Days</option>
                <option value="CurrentMonth" selected>Current Month</option>
                <option value="AllTime">All Time</option>
                <option value="custom" id="Custom">Custom Date</option>
                <option value="hidden" id="hidden" hidden>Custom Date</option>
            </select>


        </div>
        <div id="DashboardContainer">

        </div>
    </div>
</section>
<div class="modal fade modal-delete" id="customDate" tabindex="-1" aria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customDateModal">Select Data Range</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex gap-2 flex-row align-items-center justify-content-center">
                <div class="form-floating w-50">
                    <input type="date" class="form-control" id="FromDate" placeholder="fromDate">
                    <label for="fromDate">From Date</label>
                </div>

                <div class="form-floating w-50">
                    <input type="date" class="form-control" id="ToDate" placeholder="ToDate">
                    <label for="ToDate">To Date</label>
                </div>
            </div>

            <div class="modal-footer d-flex justify-content-center gap-2">
                <a id="serachDate">
                    <button type="button" id="DateRange" class="btn btn-primary">Submit</button>
                </a>
                <button type="button" class="btn border-primary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.canvasjs.com/canvasjs.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script>
    $(document).ready(function () {
        loadDashboardData();
        const $fromDate = $('#FromDate');
        const $toDate = $('#ToDate');
        let today = new Date().toISOString().slice(0, 10);
        $toDate.attr('max', today);
        $fromDate.attr('max', today);

        $fromDate.on('change', function () {
            const fromVal = $(this).val();
            if (fromVal) {
                $toDate.attr('min', fromVal);
            }
        });

        $toDate.on('change', function () {
            const toVal = $(this).val();
            if (toVal) {
                $fromDate.attr('max', toVal);
            }
        });

        $('#customDate').on('hidden.bs.modal', function () {
            $fromDate.val('');
            $toDate.val('');
            $toDate.removeAttr('min');
        });

        function getDateRange(selectedRangeValue) {
            let startDate;
            let endDate = new Date();
            $('#Custom').removeClass('selectedOption');

            switch (selectedRangeValue) {
                case "Today":
                    startDate = new Date();
                    endDate = new Date();
                    break;
                case "Last7Days":
                    startDate = new Date();
                    startDate.setDate(endDate.getDate() - 6);
                    break;
                case "Last30Days":
                    startDate = new Date();
                    startDate.setDate(endDate.getDate() - 29);
                    break;
                case "AllTime":
                    $.ajax({
                        url: '/Dashboard/GetFirstOrderDate',
                        type: 'GET',
                        async: false,
                        success: function (data) {
                            startDate = new Date(data);
                        },
                        error: function () {
                            toastr.error("Failed to fetch the first order date.");
                        }
                    });
                    break;
                case "CurrentMonth":
                default:
                    const today = new Date();
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    let endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                    endDate = (endOfMonth > today) ? today : endOfMonth;
                    break;
            }

            return {
                startDate: formatDate(startDate),
                endDate: formatDate(endDate)
            };
        }

        $('#DateRange').on('click', function (e) {
            e.preventDefault();
            let fromDate = $('#FromDate').val();
            let toDate = $('#ToDate').val();
            if (fromDate == null || fromDate == "") {
                toastr.error("Please select from date");
                return;
            }
            if (toDate == null || toDate == "") {
                toastr.error("Please select to date");
                return;
            }

            $.ajax({
                url: '/Dashboard/Data',
                type: 'GET',
                data: {
                    startDate: fromDate,
                    endDate: toDate
                },
                success: function (data) {
                    $('#DashboardContainer').html(data);
                    $('#customDate').modal('hide');
                }
            });
        });

        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function loadDashboardData() {
            console.log('called');
            let dates = "";
            const selectedRangeValue = $('#dateDropdown').val();
            console.log(typeof (selectedRangeValue));
            if (selectedRangeValue == "custom") {
                $('#dateDropdown').val("hidden");
                $('#Custom').addClass('selectedOption');
                $('#customDate').modal('show');
            }
            else {
                dates = getDateRange(selectedRangeValue);

                console.log(dates);

                $.ajax({
                    url: '/Dashboard/Data',
                    type: 'GET',
                    data: {
                        startDate: dates.startDate,
                        endDate: dates.endDate
                    },
                    success: function (data) {
                        $('#DashboardContainer').html(data);
                    }
                });
            }
        }

        $('#dateDropdown').on('change', function () {
            loadDashboardData();
        });


    });
</script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>