@using pizzashop.repository.Models
@model pizzashop.repository.ViewModels.AddEditItemViewModel

<div class="modal fade" id="addItem" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered justify-content-center">
        <form method="post" id="addItemForm" enctype="multipart/form-data">
            <div class="modal-content" style="width:1000px;">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Add New Menu Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body d-flex">
                    <!-- Left side content remains unchanged -->
                    <div class="left-side-addItem w-75">
                        <!-- First row -->
                        <div>
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <select class="form-select" asp-for="Categoryid" asp-items="Model.Category"
                                                id="categoryid" aria-label="Floating label select example">
                                                <option value="">Select Category</option>
                                            </select>
                                            <label for="categoryid">Categories</label>
                                            <span class="text-danger" asp-validation-for="Categoryid"></span>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="AddName"
                                                placeholder="Name" asp-for="Itemname">
                                            <label for="AddName">Name*</label>
                                            <span class="text-danger" asp-validation-for="Itemname"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Two row -->
                        <div class="container-fluid">
                            <div class="row">
                                <div class=" col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <select class="form-select" asp-for="ItemType" id="floatingSelect"
                                            aria-label="Item type">
                                            @foreach (var type in
                                            Enum.GetValues(typeof(itemtype)).Cast<itemtype>())
                                            {
                                                <option value="@((int)type)">
                                                    @type.ToString()
                                                </option>
                                            }
                                        </select>
                                        <label for="floatingSelect">Item Type*</label>
                                        <span class="text-danger" asp-validation-for="ItemType"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6  col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" asp-for="Rate" id="floatingInput"
                                            placeholder="Rate" value="">
                                        <label for="floatingInput">Rate*</label>
                                        <span class="text-danger" asp-validation-for="Rate"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" asp-for="Quantity" id="floatingInput"
                                            placeholder="Quantity">
                                        <label for="floatingInput">Quantity*</label>
                                        <span class="text-danger" asp-validation-for="Quantity"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <select class="form-select" asp-for="Unitid" asp-items="Model.Units"
                                            id="floatingSelect" aria-label="Item type" required>
                                            <option value="">Select a Unit</option>
                                        </select>
                                        <label for="floatingSelect">Unit*</label>
                                        <span class="text-danger" asp-validation-for="Unitid"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Three row -->
                        <div class="container-fluid">
                            <div class="row">
                                <div
                                    class=" col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3 d-flex align-items-center">
                                    <div class="form-check form-switch d-flex gap-2 align-items-center">
                                        <input class="form-check-input" asp-for="Isavailable" type="checkbox"
                                            role="switch" id="flexSwitchCheckDefault">
                                        <label class="form-check-label" for="flexSwitchCheckDefault">Available</label>
                                    </div>
                                </div>

                                <div
                                    class="col-xxl-3 col-lg-6 col-md-6  col-sm-6 col-12 mb-3 d-flex align-items-center">
                                    <div
                                        class="form-check form-switch d-flex gap-2 align-items-center justify-content-start">
                                        <input class="form-check-input" asp-for="Isdefaulttax" type="checkbox"
                                            role="switch" id="flexSwitchCheckDefault">
                                        <label class="form-check-label" for="flexSwitchCheckDefault">DefaultTax</label>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" asp-for="Taxpercentage" class="form-control"
                                            id="floatingInput" placeholder="Tax Percentage">
                                        <label for="floatingInput">Tax Percentage</label>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" asp-for="Shortcode" class="form-control" id="floatingInput"
                                            placeholder="Short Code">
                                        <label for="floatingInput">Short Code</label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Description textarea -->
                        <div class="container-fluid mb-3">
                            <textarea class="form-control" asp-for="Description" placeholder="Description"
                                id="floatingTextarea2" style="height: 100px"></textarea>
                        </div>

                        <!-- Image upload -->
                        <div class="container-fluid">
                            <span>Upload Image</span>
                            <div class="input-group d-flex justify-content-center align-items-center file-upload p-4">
                                <label for="files"
                                    class="btn w-100 d-flex align-items-center justify-content-center flex-column border-0">
                                    <div class="d-flex">
                                        <img id="profileImg" style="width: 50px; display: none;" />
                                        <div class="d-flex align-items-center ms-3">
                                            <img src="~/images/cloud-arrow-up.svg" alt="upload-icon"
                                                style="width: 30px;" />
                                            <span class="ms-2">
                                                Drag and Drop Or Browse files
                                            </span>
                                        </div>
                                    </div>
                                </label>
                                <input id="files" type="file" class="upload-file d-none" name="ProfileImage" />
                            </div>
                        </div>
                    </div>

                    <!-- Right side - updated to match image with dropdown -->
                    <div class="right-side-addItem">
                        <!-- Modifier Group Dropdown styled like the image -->
                        <div class="container-fluid mt-2">
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start" type="button"
                                    id="modifierGroupDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    Select Modifier Group(s)
                                </button>
                                <ul class="dropdown-menu w-100" aria-labelledby="modifierGroupDropdown">
                                    @foreach (var group in Model.ModifierGroups)
                                    {
                                        <li class="mt-2"><a class="dropdown-item modifier-group-item" data-id="@group.Value"
                                                data-name="@group.Text" href="#">@group.Text</a></li>
                                    }
                                </ul>
                            </div>
                        </div>

                        <!-- Container for dynamically added modifier groups -->
                        <div id="selectedModifierGroups" class="mt-3">
                            <!-- Dynamic modifier groups will be loaded here -->
                        </div>
                    </div>
                </div>

                <div class="modal-footer d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-primary" id="SaveItem">Save</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Templates for dynamic content (hidden) -->
<template id="modifier-group-template">
    <div class="modifier-group-container mt-2 pb-2" data-group-id="">
        <div class="d-flex justify-content-between align-items-center ps-md-4 pe-md-4 ps-sm-3 pe-sm-3 ps-1 pe-1">
            <span class="fw-bold group-name"></span>
            <button type="button" class="btn btn-sm text-secondary delete-group p-0">
                <i class="bi bi-trash"></i>
            </button>
        </div>

        <div class="d-flex align-items-center justify-content-center my-1">
            <select class="form-select form-select-sm min-selection-select min-max me-4">
                <option value="0" selected>0</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>

            <select class="form-select form-select-sm max-selection-select min-max">
                <option value="0" selected>0</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>
        </div>

        <ul class="list-styled modifier-items-list">
            <!-- Modifiers will be added here dynamically -->
        </ul>

        <input type="hidden" class="group-id-input" name="selectedModifierGroups" value="">
    </div>
</template>
<script>
    // File upload preview
    document.getElementById('files').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (event) {
                document.getElementById('profileImg').src = event.target.result;
                document.getElementById('profileImg').style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    });

    $(document).ready(function () {
        // Map to store selected modifier groups data

        function ItemList(categoryId , page) {
            console.log(categoryId + "cat");
             let pageSize = $("#pageSizeSelect").val();
            let search = $("#searchInput").val(); 
            $.ajax({
                type: "GET",
                url: '/Menu/Items',
                contentType: "application/json",
                data: {  page: page, pageSize: pageSize, search: search, categoryId: categoryId },
                success: function (data) {
                    $('#itemByCategory').html(data);
                }
            });
        };
        function resetModifierGroups() {
    $('#selectedModifierGroups').empty();
}

        $('#addItem').on('hidden.bs.modal', resetModifierGroups);
        const selectedGroups = new Map();

        // Handle modifier group selection from dropdown
        $(document).on('click', '.modifier-group-item', function (e) {
            e.preventDefault();
            const groupId = $(this).data('id');
            const groupName = $(this).data('name');

            // Prevent re-fetching if group is already selected
            if (!selectedGroups.has(groupId)) {
                fetchModifierGroupData(groupId, groupName);
            }
        });

        // Handle deletion of modifier groups
        $(document).on('click', '.delete-group', function () {
            const $groupContainer = $(this).closest('.modifier-group-container');
            const groupId = $groupContainer.data('group-id');
            selectedGroups.delete(groupId);
            $groupContainer.remove();
        });

        // Handle min/max selection changes
        $(document).on('change', '.min-selection-select, .max-selection-select', function () {
            const $groupContainer = $(this).closest('.modifier-group-container');
            const groupId = $groupContainer.data('group-id');

            if (selectedGroups.has(groupId)) {
                const group = selectedGroups.get(groupId);
                const isMinSelect = $(this).hasClass('min-selection-select');

                if (isMinSelect) {
                    group.minSelection = parseInt($(this).val());
                } else {
                    group.maxSelection = parseInt($(this).val());
                }
            }
        });

        // Function to fetch modifier group data
        function fetchModifierGroupData(groupId, groupName) {
            // Show loading indicator
            const loadingHtml = `<div id="loading-${groupId}" class="text-center p-3"><span>Loading modifiers...</span></div>`;
            $('#selectedModifierGroups').append(loadingHtml);

            // Fetch modifiers from the backend
            $.ajax({
                url: `/Menu/GetModifiers/${groupId}`,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    // Remove loading indicator
                    $(`#loading-${groupId}`).remove();

                    if (data.success) {
                        // Add the group to our selected groups
                        selectedGroups.set(groupId, {
                            id: groupId,
                            name: groupName,
                            minSelection: 0,
                            maxSelection: 0,
                            modifiers: data.modifiers
                        });

                        // Create and append the group HTML
                        addModifierGroupUI(groupId, groupName, data.modifiers);
                    } else {
                        alert('Error loading modifiers: ' + data.message);
                    }
                },
                error: function (error) {
                    // Remove loading indicator
                    $(`#loading-${groupId}`).remove();
                    console.error('Error fetching modifiers:', error);
                    alert('Failed to load modifiers. Please try again.');
                }
            });
        }

        // Function to add a modifier group to the UI
        function addModifierGroupUI(groupId, groupName, modifiers) {
            // Clone the template
            if ($(`[data-group-id="${groupId}"]`).length > 0) {
                return; // Prevent duplicate groups
                }
            const template = document.getElementById('modifier-group-template');
            const $groupContainer = $(template.content.cloneNode(true));

            // Set group ID and name
            $groupContainer.find('.modifier-group-container').attr('data-group-id', groupId);
            $groupContainer.find('.group-name').text(groupName);
            $groupContainer.find('.group-id-input').val(groupId);

            // Set names for selects to be used in form submission
            $groupContainer.find('.min-selection-select').attr('name', `modifierGroups[${groupId}].minSelection`);
            $groupContainer.find('.max-selection-select').attr('name', `modifierGroups[${groupId}].maxSelection`);

            // Add modifiers to the list
            const $modifiersList = $groupContainer.find('.modifier-items-list');
            if (modifiers && modifiers.length > 0) {
                modifiers.forEach((modifier, index) => {
                    const modifierHtml = `
                <li>
                    <span class="modifier-name">${modifier.modifiername}</span>
                    <span class="modifier-price">${modifier.rate}</span>
                    <input type="hidden" name="modifierGroups[${groupId}].modifiers[${index}].id" value="${modifier.modifierid}">
                </li>
            `;
                    $modifiersList.append(modifierHtml);
                });
            } else {
                $modifiersList.append('<li>No modifiers available</li>');
            }

            // Append to the container
            $('#selectedModifierGroups').append($groupContainer);
        }

        $('#SaveItem').on('click', function (e) {
           e.preventDefault();
            console.log("clicked");
            if($('#addItemForm').valid()){
            var formData = new FormData($("#addItemForm")[0]);
            var catid = $("#categoryid").val();

            // Add selected modifier groups to form data
            let groupsData = [];
            selectedGroups.forEach((group, groupId) => {
                groupsData.push({
                    modifiergroupid: parseInt(groupId),
                    minselectionrequired: group.minSelection,
                    maxselectionallowed: group.maxSelection
                });
            });

            console.log('Modifier Groups:', JSON.stringify(groupsData));

            // Add JSON data of selected groups
            formData.append('SelectedModifierGroups', JSON.stringify(groupsData));

            // Submit the form data via AJAX
            $.ajax({
                url: '/Menu/AddNewItem',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    if (data.success) {
                        ItemList(catid,1);
                        
                        // Optionally reload page or update UI
                    } else {
                        alert(data.message);
                    }
                },
                error: function (error) {
                    console.error('Error:', error);
                    alert('An error occurred while saving the item.');
                }
            });
            }
        });
        
    });
</script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<style>
    .right-side-addItem {
        padding: 0;
        width: 25%;
    }

    .modifier-group-container {
        font-size: 0.9rem;
        border-bottom: 1px solid #eee;
    }

    .min-max-label {
        font-size: 0.8rem;
        color: #666;
        width: 30px;
    }

    .min-selection-select,
    .max-selection-select {
        width: 50px;
    }

    #selectedModifierGroups {
        max-height: 400px;
        overflow-y: auto;
    }

    .dropdown-menu {
        max-height: 200px;
        overflow-y: auto;
    }

    .modifier-items-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0;
        margin-top: 0px !important;
    }

    .modifier-items-list li .modifier-price {
        @* text-align: right; *@
        width: 40px;
    }

    .modifier-items-list li .modifier-name {
        @* padding-left: 3px !important;  *@
    }
</style>