@{
    Layout = "_Layout";
    ViewData["Title"] = "Menu Page";
}
@model CategoryViewModel

<head>
    <link rel="stylesheet" href="~/css/Menu.css">

</head>
<section style="min-height: 100vh;background-color: #fafafa;">
    <div class="row pt-4 ms-1 me-1" style="height: 70px;">
        <h2 class="col" style="color: rgb(101, 101, 224); font-family: Roboto; font-weight: 550">Menu
            </h1>
    </div>
    <div class="row mt-3 ms-4 me-4" style="background-color:white; border-radius: 5px;">
        <nav class="col-auto">
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-items"
                    type="button" role="tab" aria-controls="nav-items" aria-selected="true" style="height:60px;">
                    <img src="~/images/bullet-list.png" style="width: 20px;">
                    Items
                </button>
                <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-modifiers"
                    type="button" role="tab" aria-controls="nav-modifiers" aria-selected="false" style="height:60px;">
                    <img src="~/images/grid.png" style="width: 20px;">
                    Modifiers
                </button>
            </div>
        </nav>

    </div>
    <div class="row mt-3 ms-4 me-4" style="background-color:white; border-radius: 5px;">
        <div class="container tab-content" id="nav-tabContent">
            <div class="tab-pane show active" id="nav-items" role="tabpanel" aria-labelledby="nav-home-tab">
                <div class="row" style="min-height: 600px;">
                    <div class="col-auto d-lg-block d-none"
                        style="background: linear-gradient(to right, white, rgb(225, 224, 224))">
                        <div class="row px-3 mt-1">
                            <div class="col-auto d-flex align-items-center me-5 fw-bold" style="font-size: 20px;">
                                Category
                            </div>
                            <button class="btn col-auto ms-5" type="button" data-bs-toggle="modal"
                                data-bs-target="#Add-Category">
                                <img src="~/images/more.png" style="width: 30px;">
                            </button>
                        </div>
                        <div class="row overflow-auto me-2 mt-2" style="height: 400px;" id="Category">

                        </div>
                    </div>
                    <div class="col">
                        <div class="row px-3">
                            <div class="col-auto d-flex align-items-center mt-1 fw-bold" style="font-size: 20px;">Items
                            </div>
                        </div>

                        <div class="btn-group d-lg-none">
                            <button type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown"
                                aria-expanded="false">
                                Category
                            </button>
                            <div class="col-auto dropdown-menu"
                                style="background: linear-gradient(to right, white, rgb(225, 224, 224))">
                                <div class="row px-3 mt-1">
                                    <div class="col-auto d-flex align-items-cente fw-bold" style="font-size: 20px;">
                                        Category
                                    </div>
                                    <button class="btn col-auto ms-auto" type="button" data-bs-toggle="modal"
                                        data-bs-target="#Add-Category">
                                        <img src="~/images/more.png" style="width: 30px;">
                                    </button>
                                </div>
                                <div class="row overflow-auto me-2 mt-2" style="height: 400px; " id="">

                                </div>
                            </div>
                        </div>
                        <div class="row justify-content-end ms-lg-5 me-lg-5 me-2 mt-2" style="height: 50px;">
                            <input type="search" class="col-md-auto col-6 me-1 " id="searchInput" placeholder="search"
                                style="border-radius: 3px; border: 1px solid black">
                            <button type="button" class="btn" style="width: 50px; border: 1px solid black"><img
                                    src="~/images/trash.svg"></button>
                            <button type="button"
                                class="btn col-md-auto col-3 ms-1 align-items-center d-flex item-button addItem"
                                style="border-radius: 2px; border: 1px solid black; background-color: rgb(85, 85, 247); color: white  !important;">
                                + New Item
                            </button>
                        </div>
                        <div class="row table-responsive pt-4 ms-2 me-2" id="itemByCategory">

                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane show" id="nav-modifiers" role="tabpanel" aria-labelledby="nav-profile-tab">
                <div class="row" style="min-height: 600px;">
                    <div class="col-auto d-lg-block d-none"
                        style="background: linear-gradient(to right, white, rgb(225, 224, 224))">
                        <div class="row px-3 mt-1">
                            <div class="col-auto d-flex align-items-center fw-bold" style="font-size: 20px;">
                                Modifier Group
                            </div>
                            <button class="btn col-auto ms-3" type="button" data-bs-toggle="modal"
                                data-bs-target="#addModifiersGroup">
                                <img src="~/images/more.png" style="width: 30px;">
                            </button>
                        </div>
                        <div class="row overflow-auto me-2 mt-2" style="height: 400px; ;" id="ModifierGroup">

                        </div>
                    </div>
                    <div class="col">
                        <div class="row px-3">
                            <div class="col-auto d-flex align-items-center mt-1 fw-bold" style="font-size: 20px;">
                                Modifiers
                            </div>
                        </div>

                        <div class="btn-group d-lg-none">
                            <button type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown"
                                aria-expanded="false">
                                Modifier Group
                            </button>
                            <div class="col-auto dropdown-menu"
                                style="background: linear-gradient(to right, white, rgb(225, 224, 224))">
                                <div class="row px-3 mt-1">
                                    <div class="col-auto d-flex align-items-cente fw-bold" style="font-size: 20px;">
                                        Modifier Group
                                    </div>
                                    <button class="btn col-auto ms-auto" type="button" data-bs-toggle="modal"
                                        data-bs-target="#addModifiersGroup">
                                        <img src="~/images/more.png" style="width: 30px;">
                                    </button>
                                </div>
                                <div class="row overflow-auto me-2 mt-2" style="height: 400px;   ;">
                                    <ul>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">
                                                    Sandwich</div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">Pasta
                                                </div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">Sides
                                                    and Appetizers</div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">Salads
                                                </div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">Dips
                                                    and Sauces</div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">pizza
                                                </div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">
                                                    Deserts</div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                        <li class="d-flex">
                                            <div class="d-flex align-items-center"
                                                style="padding-top: 5px; padding-bottom: 5px;">
                                                <img src="~/images/dots-graphic.png">
                                                <div style="width: 130px;" class="text-wrap ms-1 fw-bold">
                                                    Burgers</div>
                                            </div>
                                            <img src="~/images/pen.svg" class="ms-auto">
                                            <img src="~/images/trash.svg" style="margin-right: 0px;">
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="row justify-content-end ms-lg-5 me-lg-5 me-2 mt-2" style="height: 50px;">
                            <input type="search" class="col-md-auto col-6 me-1 " id="search" placeholder="search"
                                style="border-radius: 3px; border: 1px solid black">
                            <button type="button" class="btn" style="width: 50px; border: 1px solid black"><img
                                    src="~/images/trash.svg"></button>
                            <a href="" type="button"
                                class="btn col-md-auto col-3 ms-1 align-items-center d-flex item-button"
                                style="border-radius: 2px; border: 1px solid black; background-color: rgb(85, 85, 247); color: white  !important;"
                                data-bs-toggle="modal" data-bs-target="#addNewModifier">
                                + New Modifier
                            </a>
                        </div>
                        <div class="row table-responsive pt-4 ms-2 me-2" id="Modifier">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="fade modal" id="exampleModalCenter" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 400px;">
            <div class="modal-content">
                <div class="row mx-1 mt-2">
                    <h5 class="modal-title col" id="staticBackdropLabel">Delete confirmation</h5>
                    <button type="button" class="btn-close col-auto me-1" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="d-flex justify-content-center align-items-center mt-4 flex-column">
                    <img src="~/images/caution.png" style="height: 40px; width: 40px;">
                    <span>Are you sure you want to delete this user?</span>
                    <div class="d-flex justify-content-center align-items-center mt-2 mb-4">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                            style="border-radius: 3px; width: 60px;">Yes</button>
                        <button type="button" class="btn ms-2 border"
                            style="border-radius: 3px; width: 60px;">No</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="fade modal" id="DeleteCategoryModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 400px;">
            <div class="modal-content">
                <div class="row mx-1 mt-2">
                    <h5 class="modal-title col" id="staticBackdropLabel">Delete confirmation</h5>
                    <button type="button" class="btn-close col-auto me-1" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="d-flex justify-content-center align-items-center mt-4 flex-column">
                    <img src="~/images/caution.png" style="height: 40px; width: 40px;">
                    <span>Are you sure you want to delete this category?</span>
                    <form id="deleteCategoryForm">
                        <input id="hiddenField" type="hidden" />
                        <div class="d-flex justify-content-center align-items-center mt-2 mb-4">
                            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal"
                                style="border-radius: 3px; width: 60px;">Yes</button>
                            <button type="button" class="btn ms-2 border"
                                style="border-radius: 3px; width: 60px;">No</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="fade modal" id="Edit-Category" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 500px;">
            <div class="modal-content ps-3 pe-3">
                <div class="row mt-2">
                    <h5 class="modal-title col" id="staticBackdropLabel">Edit Category</h5>
                    <button type="button" class="btn-close col-auto me-3" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <form class="mt-4" id="editCategoryForm">
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="EditCategoryname" name="Categoryname"
                            placeholder="Name">
                        <label for="Categoryname" class="label-pad">Name</label>
                    </div>
                    <div class="form-floating">
                        <input type="text" class="form-control" id="EditDescription" name="Description"
                            placeholder="Description">
                        <label for="Description" class="label-pad">Description</label>
                    </div>
                    <input type="hidden" id="Categoryid" />
                    <div class="d-flex justify-content-end align-items-center mt-5 mb-4">
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal"
                            style="border-radius: 3px;" id="Save">Save</button>
                        <button type="button" class="btn ms-2 border" data-bs-dismiss="modal"
                            style="border-radius: 3px; ">Cancel</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
    <div class="fade modal" id="Add-Category" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 500px;">
            <div class="modal-content ps-3 pe-3">
                <div class="row mt-2">
                    <h5 class="modal-title col" id="staticBackdropLabel">Add Category</h5>
                    <button type="button" class="btn-close col-auto me-3" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <form class="mt-4" id="addCategoryForm">
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="Categoryname" name="Categoryname"
                            placeholder="Name">
                        <label for="Categoryname" class="label-pad">Name</label>
                    </div>
                    <div class="form-floating">
                        <input type="text" class="form-control" id="Description" name="Description"
                            placeholder="Description">
                        <label for="Description" class="label-pad">Description</label>
                    </div>
                    <div class="d-flex justify-content-end align-items-center mt-5 mb-4">
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal"
                            style="border-radius: 3px;" id="Save">Save</button>
                        <button type="button" class="btn ms-2 border" data-bs-dismiss="modal"
                            style="border-radius: 3px; ">Cancel</button>
                    </div>
                </form>

            </div>
        </div>
    </div>

    <div class="fade modal" id="DeleteItemModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 400px;">
            <div class="modal-content">
                <div class="row mx-1 mt-2">
                    <h5 class="modal-title col" id="staticBackdropLabel">Delete confirmation</h5>
                    <button type="button" class="btn-close col-auto me-1" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="d-flex justify-content-center align-items-center mt-4 flex-column">
                    <img src="~/images/caution.png" style="height: 40px; width: 40px;">
                    <span>Are you sure you want to delete this item?</span>
                    <form id="deleteItemForm">
                        <input id="item" type="hidden" />
                        <input id="category" type="hidden" />
                        <div class="d-flex justify-content-center align-items-center mt-2 mb-4">
                            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal"
                                style="border-radius: 3px; width: 60px;">Yes</button>
                            <button type="button" class="btn ms-2 border"
                                style="border-radius: 3px; width: 60px;">No</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="fade modal" id="DeleteModifierModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="width: 400px;">
            <div class="modal-content">
                <div class="row mx-1 mt-2">
                    <h5 class="modal-title col" id="staticBackdropLabel">Delete confirmation</h5>
                    <button type="button" class="btn-close col-auto me-1" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="d-flex justify-content-center align-items-center mt-4 flex-column">
                    <img src="~/images/caution.png" style="height: 40px; width: 40px;">
                    <span>Are you sure you want to delete this modifier?</span>
                    <form id="deleteModifierForm">
                        <input id="modifier" type="hidden" />
                        <input id="modifierGroup" type="hidden" />
                        <div class="d-flex justify-content-center align-items-center mt-2 mb-4">
                            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal"
                                style="border-radius: 3px; width: 60px;">Yes</button>
                            <button type="button" class="btn ms-2 border"
                                style="border-radius: 3px; width: 60px;">No</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-addNewModifier">
        <div class="modal fade" id="addNewModifier" tabindex="-1" aria-labelledby="addNewModifier" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addNewModifier">Add New Modifier</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">

                        <!-- first row -->
                        <div>
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <select class="form-select" id="floatingSelect" aria-label="Item type"
                                                required>
                                                <option selected>Select Modifier Group(s)</option>
                                                <option value="1">Pasta</option>
                                                <option value="2">Pizza</option>
                                                <option value="3">Desserts</option>
                                            </select>
                                            <label for="floatingSelect">Modifier</label>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="floatingInput"
                                                placeholder="Name" required>
                                            <label for="floatingInput">Name*</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="container-fluid ">
                            <div class="row">
                                <div class="col-lg-4 col-md-4 col-sm-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput" placeholder="Rate"
                                            required value="0">
                                        <label for="floatingInput">Rate*</label>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-12">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput"
                                            placeholder="Quantity" required value="0">
                                        <label for="floatingInput">Quantity*</label>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-12 doted-border">
                                    <div class="form-floating">
                                        <select class="form-select" id="floatingSelect" aria-label="Item type" required>
                                            <option selected>Select a Unit</option>
                                            <option value="1">Pasta</option>
                                            <option value="2">Pizza</option>
                                            <option value="3">Desserts</option>
                                        </select>
                                        <label for="floatingSelect">Unit*</label>
                                    </div>
                                </div>
                            </div>
                        </div>



                        <div class="container-fluid form-floating">
                            <textarea class="form-control" placeholder="Give Description of this Modifier"
                                id="floatingTextarea"></textarea>
                            <label for="floatingTextarea">Description</label>
                        </div>


                    </div>


                    <div class="modal-footer d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Save</button>
                        <button type="button" class="btn btn-danger">Cancel</button>
                    </div>
                </div>
            </div>
        </div>


    </div>

    <div class="modal fade modal-addModifiersGroup" id="addModifiersGroup" tabindex="-1"
        aria-labelledby="AddNewCategory" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Modifier Group</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form>
                    <div class="modal-body ">

                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="modifierGroupName" placeholder="Category name"
                                required>
                            <label for="modifierGroupName">Name*</label>
                        </div>

                        <div class="form-floating mb-3">
                            <textarea class="form-control" placeholder="Add a Description of Xategory"
                                id="modifierGroupDescription"></textarea>
                            <label for="modifierGroupDescription">Description</label>
                        </div>

                        <a><span id="AddModifierGroupBtn">+ Add Existing
                                Modifiers</span></a>

                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary sav-btn" data-bs-dismiss="modal">Save</button>
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="modal fade modal-updateModifiersGroup" id="editModifiersGroup" tabindex="-1"
        aria-labelledby="AddNewCategory" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Modifier Group</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form>
                    <div class="modal-body ">

                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="modifierGroupName" placeholder="Category name"
                                required>
                            <label for="modifierGroupName">Name*</label>
                        </div>

                        <div class="form-floating mb-3">
                            <textarea class="form-control" placeholder="Add a Description of Xategory"
                                id="modifierGroupDescription"></textarea>
                            <label for="modifierGroupDescription">Description</label>
                        </div>

                        <a><span id="AddModifierGroupBtn">+ Add Existing
                                Modifiers</span></a>

                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary sav-btn" data-bs-dismiss="modal">Save</button>
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- Add new item -->
    <div class="modal-addNewItem" id="AddEditItem"></div>

    </div>


    <div class="modal fade" id="selectExistingModifiers" tabindex="-1" aria-labelledby="deleteModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header pb-0">
                    <h5 class="modal-title">Select Existing Modifiers</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="col-md-auto col-11 mt-1 ms-md-3 ms-4 w-50 d-flex align-items-center justify-content-center"
                        style="height: 50px;">
                        <input class="search form-control me-2" type="search" placeholder="Search" aria-label="Search"
                            id="searchModifier" style="height: 48px;">
                    </div>
                    <div id="ExistingModifier"></div>
                </div>
                <div class="modal-footer d-flex justify-content-start gap-2">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Add</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://code.jquery.com/jquery-3.6.0.min.js">
</script>
<script>

    $(document).ready(function () {
        let lastSelectedCategoryId = 0;
        const selectedGroups = new Map();
        let selectedModifiers = [];
        
        $(document).on("click", ".delete-category", function () {
            var Id = $(this).data("id");
            $("#hiddenField").val(Id);
        });

        $(document).on("click", ".deleteItem", function () {
            var item = $(this).data("id");
            var category = $(this).data("category");
    @* console.log(item + category); *@
                $("#item").val(item);
            $("#category").val(category);
        });

        $(document).on("click", ".deleteModifier", function () {
            var modifier = $(this).data("id");
            var modifierGroup = $(this).data("modifiergroup");
    @* console.log(modifierGroup + "Group"); *@
                $("#modifier").val(modifier);
            $("#modifierGroup").val(modifierGroup);
        });

        function categoryList() {
            $.ajax({
                url: '/Menu/Category',
                type: 'GET',
                success: function (data) {
                    $('#Category').html(data);
                }
            });
        };

        function ItemList(categoryId, page) {
            console.log(categoryId + "cat");
            let pageSize = $("#pageSizeSelect").val();
            let search = $("#searchInput").val();
            $.ajax({
                type: "GET",
                url: '/Menu/Items',
                contentType: "application/json",
                data: { page: page, pageSize: pageSize, search: search, categoryId: categoryId },
                success: function (data) {
                    $('#itemByCategory').html(data);
                }
            });
        };

        $("#itemByCategory").on("click", ".pagination-link", function (e) {
            e.preventDefault();
            let page = $(this).data("page");
            let CategoryId = $("#CategoryId").val();
            if (page > 0) {
                ItemList(CategoryId, page);
            }
        });

        $("#itemByCategory").on("change", "#pageSizeSelect", function () {
            let CategoryId = $("#CategoryId").val();
            ItemList(CategoryId, 1);
        });



        let searchTimer;
        $("#searchInput").on("input", function () {
            clearTimeout(searchTimer);
            let CategoryId = $("#CategoryId").val();
            searchTimer = setTimeout(function () {
                ItemList(CategoryId || lastSelectedCategoryId, 1);
            }, 100);
        });

        function modifierGroupList() {
            $.ajax({
                url: '/Menu/ModifierGroup',
                type: 'GET',
                success: function (data) {
                    $('#ModifierGroup').html(data);
                }
            });
        };

        function modifierList(ModifierGroupId) {
            $.ajax({
                type: "GET",
                url: '/Menu/Modifiers',
                contentType: "application/json",
                data: { ModifierGroupId: ModifierGroupId },
                success: function (data) {
                    $('#Modifier').html(data);
                }
            });
        };

        categoryList();
        modifierGroupList();

        $(document).on("click", ".addItem", function () {
            console.log("clicked");
            $.ajax({
                url: "/Menu/AddNewItem",
                type: "GET",
                success: function (response) {
                    $("#AddEditItem").html(response);
                    $("#addItem").modal("show");
                }
            });
        });

        $(document).on("click", ".editItem", function () {
            var itemId = $(this).data("id");
            console.log("clicked");
            $.ajax({
                url: "/Menu/editItem",
                type: "GET",
                data: { itemId: itemId },
                success: function (response) {
                    $("#AddEditItem").html(response);
                    resetModifierGroups();
                    fetchExistingModifierGroups(itemId);
                    $("#editItem").modal("show");
                }
            });
        });

        $(document).on("click", "#EditItem", function (e) {
            e.preventDefault();
            console.log("clicked");
            var formData = new FormData($("#editItemForm")[0]);
            var catid = $("#categoryid").val();

            let groupsData = [];
            selectedGroups.forEach((group, groupId) => {
                groupsData.push({
                    modifiergroupid: parseInt(groupId),
                    minselectionrequired: group.minSelection,
                    maxselectionallowed: group.maxSelection
                });
            });

            console.log('Modifier Groups:', JSON.stringify(groupsData));

            // Add JSON data of selected groups
            formData.append('SelectedModifierGroups', JSON.stringify(groupsData));

            console.log(formData + "Hii");
            $.ajax({
                url: "/Menu/editItem",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                dataType: "json",
                success: function (response) {
                    ItemList(catid, 1);
                },
                error: function (error) {

                }
            });
        });

        $("#addCategoryForm").submit(function (e) {
            e.preventDefault(); // Prevent page refresh

            var formData = {
                Categoryname: $("#Categoryname").val(),
                Description: $("#Description").val()
            };
            console.log(formData);
            $.ajax({
                type: "POST",
                url: '/Menu/Category',
                contentType: "application/json",
                data: JSON.stringify(formData),
                success: function (response) {
                    $("#Categoryname").val("");
                    $("#Description").val("");
                    categoryList();
                }
            });
        });
        $("#deleteCategoryForm").submit(function (e) {
            e.preventDefault(); // Prevent page refresh
            var categoryId = $("#hiddenField").val();
            console.log(categoryId + "delete");
            $.ajax({
                type: "POST",
                url: '/Menu/DeleteCategory',
                data: { categoryId: categoryId },
                success: function (response) {
                    categoryList();
                    ItemList(categoryId, 1);
                }
            });
        });

        $("#deleteItemForm").submit(function (e) {
            e.preventDefault(); // Prevent page refresh
            var itemId = $("#item").val();
            var categoryId = $("#category").val();
            console.log(categoryId + "delete");
            $.ajax({
                type: "POST",
                url: '/Menu/DeleteItem',
                data: { itemId: itemId },
                success: function (response) {
                    ItemList(categoryId, 1);
                }
            });
        });

        $("#deleteModifierForm").submit(function (e) {
            e.preventDefault(); // Prevent page refresh
            var modifierId = $("#modifier").val();
            var modifierGroupId = $("#modifierGroup").val();
            console.log(modifierGroupId + "delete");
            $.ajax({
                type: "POST",
                url: '/Menu/DeleteModifier',
                data: { modifierId: modifierId },
                success: function (response) {
                    modifierList(modifierGroupId);
                }
            });
        });

        $(document).on("click", ".selectedCategory", function () {
            var categoryId = $(this).data("id");
            lastSelectedCategoryId = categoryId;
            ItemList(categoryId, 1);
        });
        $(document).on("click", ".selectedModifierGroup", function () {
            var modifierGroupId = $(this).data("id");
            modifierList(modifierGroupId);
        });
        $(document).on("click", ".edit-btn", function () {
            var categoryId = $(this).data("id");
            $.ajax({
                type: "GET",
                url: '/Menu/EditCategoryById',
                contentType: "application/json",
                data: { categoryId: categoryId },
                success: function (data) {
                    console.log(data);
                    $("#Categoryid").val(data.categoryid);
                    $('#EditCategoryname').val(data.categoryname);
                    $('#EditDescription').val(data.description);
                }
            });
        });
        $("#editCategoryForm").submit(function (e) {
            e.preventDefault(); // Prevent page refresh

            var formData = {
                Categoryid: $("#Categoryid").val(),
                Categoryname: $("#EditCategoryname").val(),
                Description: $("#EditDescription").val()
            };
            console.log(formData);
            $.ajax({
                type: "POST",
                url: '/Menu/EditCategoryById',
                contentType: "application/json",
                data: JSON.stringify(formData),
                success: function (response) {
                    categoryList();
                }
            });
        });

        function resetModifierGroups() {
            $('#selectedModifierGroups').empty();
            selectedGroups.clear();
        }

        $('#addItem').on('hidden.bs.modal', resetModifierGroups);
        $('#editItem').on('hidden.bs.modal', resetModifierGroups);


        // Handle modifier group selection from dropdown
        $(document).on('click', '.modifier-group-item', function (e) {
            e.preventDefault();
            const groupId = $(this).data('id');
            const groupName = $(this).data('name');
            console.log(groupId + groupName);
            // Prevent re-fetching if group is already selected
            if (!selectedGroups.has(groupId)) {
                console.log(groupId + groupName);
                fetchModifierGroupData(groupId, groupName);
            }
        });

        // Handle deletion of modifier groups
        $(document).on('click', '.delete-group', function () {
            const $groupContainer = $(this).closest('.modifier-group-container');
            const groupId = $groupContainer.data('group-id');
            selectedGroups.delete(groupId);
            $groupContainer.remove();
        });

        // Handle min/max selection changes
        $(document).on('change', '.min-selection-select, .max-selection-select', function () {
            const $groupContainer = $(this).closest('.modifier-group-container');
            const groupId = $groupContainer.data('group-id');

            if (selectedGroups.has(groupId)) {
                const group = selectedGroups.get(groupId);
                const isMinSelect = $(this).hasClass('min-selection-select');

                if (isMinSelect) {
                    group.minSelection = parseInt($(this).val());
                } else {
                    group.maxSelection = parseInt($(this).val());
                }
            }
        });

        // Function to fetch modifier group data
        function fetchModifierGroupData(groupId, groupName) {
            // Show loading indicator
            const loadingHtml = `<div id="loading-${groupId}" class="text-center p-3"><span>Loading modifiers...</span></div>`;
            $('#selectedModifierGroups').append(loadingHtml);

            // Fetch modifiers from the backend
            $.ajax({
                url: `/Menu/GetModifiers/${groupId}`,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    // Remove loading indicator
                    $(`#loading-${groupId}`).remove();
                    console.log(data.success);

                    if (data.success) {
                        // Add the group to our selected groups
                        selectedGroups.set(groupId, {
                            id: groupId,
                            name: groupName,
                            minSelection: 0,
                            maxSelection: 0,
                            modifiers: data.modifiers
                        });

                        // Create and append the group HTML
                        addModifierGroupUI(groupId, groupName, data.modifiers);
                    } else {
                        alert('Error loading modifiers: ' + data.message);
                    }
                },
                error: function (error) {
                    // Remove loading indicator
                    $(`#loading-${groupId}`).remove();
                    console.error('Error fetching modifiers:', error);
                    alert('Failed to load modifiers. Please try again.');
                }
            });
        }

        // Function to add a modifier group to the UI
        function addModifierGroupUI(groupId, groupName, modifiers) {
            // Clone the template
            if ($(`[data-group-id="${groupId}"]`).length > 0) {
                return; // Prevent duplicate groups
            }
            const template = document.getElementById('modifier-group-template');
            const $groupContainer = $(template.content.cloneNode(true));

            // Set group ID and name
            $groupContainer.find('.modifier-group-container').attr('data-group-id', groupId);
            $groupContainer.find('.group-name').text(groupName);
            $groupContainer.find('.group-id-input').val(groupId);

            // Set names for selects to be used in form submission
            $groupContainer.find('.min-selection-select').attr('name', `modifierGroups[${groupId}].minSelection`);
            $groupContainer.find('.max-selection-select').attr('name', `modifierGroups[${groupId}].maxSelection`);

            // Add modifiers to the list
            const $modifiersList = $groupContainer.find('.modifier-items-list');
            if (modifiers && modifiers.length > 0) {
                modifiers.forEach((modifier, index) => {
                    const modifierHtml = `
                <li>
                    <span class="modifier-name">${modifier.modifiername}</span>
                    <span class="modifier-price">${modifier.rate}</span>
                    <input type="hidden" name="modifierGroups[${groupId}].modifiers[${index}].id" value="${modifier.modifierid}">
                </li>
            `;
                    $modifiersList.append(modifierHtml);
                });
            } else {
                $modifiersList.append('<li>No modifiers available</li>');
            }

            // Append to the container
            $('#selectedModifierGroups').append($groupContainer);
        }

        $('#SaveItem').on('click', function (e) {
            e.preventDefault();
            console.log("clicked");
            var formData = new FormData($("#addItemForm")[0]);
            var catid = $("#categoryid").val();

            // Add selected modifier groups to form data
            let groupsData = [];
            selectedGroups.forEach((group, groupId) => {
                groupsData.push({
                    modifiergroupid: parseInt(groupId),
                    minselectionrequired: group.minSelection,
                    maxselectionallowed: group.maxSelection
                });
            });

            console.log('Modifier Groups:', JSON.stringify(groupsData));

            // Add JSON data of selected groups
            formData.append('SelectedModifierGroups', JSON.stringify(groupsData));

            // Submit the form data via AJAX
            $.ajax({
                url: '/Menu/AddNewItem',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    if (data.success) {
                        ItemList(catid, 1);

                        // Optionally reload page or update UI
                    } else {
                        alert(data.message);
                    }
                },
                error: function (error) {
                    console.error('Error:', error);
                    alert('An error occurred while saving the item.');
                }
            });
        });

        function fetchExistingModifierGroups(itemId) {
            console.log(itemId + "Hii existing");
            $.ajax({
                url: `/Menu/GetItemModifierGroups/${itemId}`,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    console.log(data);
                    data.forEach(group => {
                        // Add to selectedGroups map
                        selectedGroups.set(group.modifiergroupid, {
                            id: group.modifiergroupid,
                            name: group.modifiergroupName,
                            minSelection: group.minselectionrequired,
                            maxSelection: group.maxselectionallowed,
                            modifiers: group.modifiers
                        });

                        // Add to UI
                        addModifierGroupUI(
                            group.modifiergroupid,
                            group.modifiergroupName,
                            group.modifiers
                        );

                        // Set min and max selection dropdowns
                        $(`[data-group-id="${group.modifiergroupid}"] .min-selection-select`).val(group.minselectionrequired);
                        $(`[data-group-id="${group.modifiergroupid}"] .max-selection-select`).val(group.maxselectionallowed);
                    });
                },
                error: function (error) {
                    console.error('Error fetching modifier groups:', error);
                }
            });
        }

        function modifiersList(page) {
            let pageSize = $("#pageSizeSelect").val();
            let search = $("#searchModifier").val();
            $.ajax({
                type: "GET",
                url: '/Menu/Modifierlist',
                contentType: "application/json",
                data: { page: page, pageSize: pageSize, search: search },
                success: function (data) {
                    $('#ExistingModifier').html(data);
                    $('#selectExistingModifiers').modal('show');

                    updateCheckboxStates();
                }
            });
        };

        function resetModifiers() {
            selectedModifiers = [];
            console.log(selectedModifiers);
            $('tbody tr').each(function () {
                $(this).find('#ModifierCheckBox').prop('checked', false);
            });

            $('#addModifiersGroup .existing-modifiers').remove();
        }

        $('#addModifiersGroup').on('hidden.bs.modal', resetModifiers);
        $('#addModifiersGroup').on('show.bs.modal', resetModifiers);

        $(document).on("click", "#AddModifierGroupBtn", function () {
            console.log("HiiList");
            modifiersList(1);
        });

        $("#ExistingModifier").on("click", ".pagination-link", function (e) {
            e.preventDefault();
            let page = $(this).data("page");
            console.log(page + "Page");
            if (page > 0) {
                modifiersList(page);
            }
        });

        $("#ExistingModifier").on("change", "#pageSizeSelect", function () {
            modifiersList(1);
        });


        $("#searchModifier").on("input", function () {
            clearTimeout(searchTimer);
            searchTimer = setTimeout(function () {
                modifiersList(1);
            }, 100);
        });

        function updateCheckboxStates() {
            let totalCheckboxes = 0;
            let checkedCheckboxes = 0;
            const masterCheckbox = $('#MasterCheckBox');

            $('#ExistingModifier tbody tr').each(function () {
                const row = $(this);
                const modifierId = row.find('#ModifierId').val();
                const checkbox = row.find('#ModifierCheckBox');

                totalCheckboxes++;

                const isSelected = selectedModifiers.some(m => m.id === modifierId);
                console.log(selectedModifiers);

                if (isSelected) {
                    checkbox.prop('checked', true);
                    checkedCheckboxes++;
                } else {
                    checkbox.prop('checked', false);
                }
            });

            console.log(totalCheckboxes + " Total " + checkedCheckboxes + " checked");

            if (checkedCheckboxes === 0) {
                masterCheckbox.prop('checked', false);
                masterCheckbox.prop('indeterminate', false);
            } else if (checkedCheckboxes === totalCheckboxes) {
                masterCheckbox.prop('checked', true);
                masterCheckbox.prop('indeterminate', false);
            } else {
                masterCheckbox.prop('checked', false);
                masterCheckbox.prop('indeterminate', true);
            }
        }

        // Handle opening of the existing modifiers modal
        $('#AddModifierGroupBtn').on('click', function () {
            setTimeout(updateCheckboxStates, 100);
        });

        // Handle checkbox selection in the existing modifiers modal
        $(document).on('change', '#ModifierCheckBox', function () {
            const row = $(this).closest('tr');
            const modifierId = row.find('#ModifierId').val();
            const modifierName = row.find('td:nth-child(2)').text().trim();
            const checkbox = $(this);

            if (checkbox.is(':checked')) {
                // Check if modifier is not already in the list
                const exists = selectedModifiers.some(m => m.id === modifierId);
                if (!exists) {
                    selectedModifiers.push({
                        id: modifierId,
                        name: modifierName
                    });
                    checkbox.attr('checked', 'checked');
                }
            } else {
                // Remove modifier from selected list
                selectedModifiers = selectedModifiers.filter(m => m.id !== modifierId);
                checkbox.removeAttr('checked');
            }

            updateCheckboxStates();
        });

        // Handle master checkbox (select/deselect all)
        $(document).on('change', '#MasterCheckBox', function () {
            const isChecked = $(this).is(':checked');

            $('#ExistingModifier tbody tr').each(function () {
                const row = $(this).closest('tr');
                const modifierId = row.find('#ModifierId').val();
                const modifierName = row.find('td:nth-child(2)').text().trim();
                const checkbox = $(this);
                console.log(modifierName);

                if (isChecked) {
                    checkbox.attr('checked', 'checked');

                    const exists = selectedModifiers.some(m => m.id === modifierId);
                    if (!exists) {
                        selectedModifiers.push({
                            id: modifierId,
                            name: modifierName
                        });
                    }
                } else {
                    checkbox.removeAttr('checked');
                    selectedModifiers = selectedModifiers.filter(m => m.id != modifierId);
                }
            });

            $(this).attr('checked', isChecked ? 'checked' : null);
            updateCheckboxStates();
        });

        $('#selectExistingModifiers .btn-primary').on('click', function () {
            // Clear previous selections
            $('#addModifiersGroup .existing-modifiers').remove();

            // Create a container for selected modifiers
            const modifiersContainer = $('<div class="existing-modifiers d-flex flex-wrap gap-2 mt-2"></div>');

            // Add each selected modifier as a badge
            selectedModifiers.forEach(function (modifier) {
                const badge = $(`
                <span class="badge bg-primary d-flex align-items-center" data-modifier-id="${modifier.id}">
                    ${modifier.name}
                    <button type="button" class="btn-close btn-close-white ms-2 remove-modifier" aria-label="Remove"></button>
                </span>
            `);
                modifiersContainer.append(badge);
            });

            // Insert the modifiers container after the "Add Existing Modifiers" link
            $('#AddModifierGroupBtn').after(modifiersContainer);
        });

        $(document).on('click', '.remove-modifier', function () {
            const modifierId = $(this).parent().data('modifier-id');
            $(this).parent().remove();
            selectedModifiers = selectedModifiers.filter(m => m.id != modifierId);
        });

        // Optional: Prepare data for form submission
        $('form').on('submit', function (e) {
            if (selectedModifiers.length === 0) {
                e.preventDefault();
                alert('Please select at least one modifier');
                return;
            }

            // Create hidden inputs for form submission
            const hiddenInputsContainer = $('<div class="selected-modifiers-inputs"></div>');
            selectedModifiers.forEach((modifier, index) => {
                hiddenInputsContainer.append(`
                <input type="hidden" name="SelectedModifiers[${index}].Id" value="${modifier.id}">
                <input type="hidden" name="SelectedModifiers[${index}].Name" value="${modifier.name}">
            `);
            });

            // Remove any existing hidden inputs and append new ones
            $('.selected-modifiers-inputs').remove();
            $('form').append(hiddenInputsContainer);
        });

        $(".modal-addModifiersGroup form").submit(function(e) {
        e.preventDefault();
        
        // Get form values
        const modifierGroupName = $("#modifierGroupName").val();
        const description = $("#modifierGroupDescription").val();

        console.log(modifierGroupName + "name");
        
        // Extract just the IDs for the API call
        const selectedModifierIds = selectedModifiers.map(m => m.id);
        
        // Create data object
        const data = {
            Modifiergroupname: modifierGroupName,
            Description: description,
            SelectedModifierIds: selectedModifierIds
        };
        
        // Send AJAX request
        $.ajax({
            url: '/Menu/CreateModifierGroup',  
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function(response) {
                if (response.success) {
                    
                    $("#floatingInput").val('');
                    $("#floatingTextarea").val('');
                    selectedModifiers = [];
                    
                    $('#addModifiersGroup').modal('hide');
                    console.log(response);
                    modifierGroupList();
                    modifierList(response.id);
                }
            }
        });
    });

    });
</script>
