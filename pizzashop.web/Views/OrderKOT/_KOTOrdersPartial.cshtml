@model List<pizzashop.repository.ViewModels.KOTOrdersViewModel>
@{
    var hasMore = ViewData["hasMore"];
}

<div data-has-more="@hasMore" id="hasMore" class="row mt-3 g-sm-2 g-0">
    @if (Model.Count == 0)
    {
        <div class="col-12 text-center">
            <h5>No orders found</h5>
        </div>
    }
    else
    {
        @foreach (var order in Model)
        {
            <div class="col-xxl-3 col-md-6 col-12 d-flex flex-column order-clickable" data-order='@Html.Raw(Json.Serialize(order))' data-orderid='@order.OrderId'>
                <div class="order-card d-flex flex-column" style="height: 300px">
                    <div class="rounded-top ps-2 pe-2 pt-1 pb-2" style="background-color: rgba(238,238,238,0.8);"> 
                        <div class="d-flex justify-content-between">
                            <span class="order-id" style="color: #0066a7;">#@order.OrderId</span>
                            <small class="text-muted">
                                <i class="bi bi-alarm pe-1" data-orderdate="@order.OrderDate.ToString("o")"></i><span class="Timer"></span>
                            </small>
                        </div>
                        <div class="order-meta mt-1">@order.SectionName &bull; @order.TableName</div>
                    </div>
                    <div class="mt-3 ps-2 pe-2 flex-grow-1 text-muted overflow-auto">
                        @foreach (var item in order.Items)
                        {
                            <div>
                                <strong>@item.ItemName</strong> <span class="float-end fw-bold">@item.Quantity</span>
                                @if (item.Modifiers != null && item.Modifiers.Any())
                                {
                                    <ul class="mb-0">
                                        @foreach (var modifier in item.Modifiers)
                                        {
                                            <li class="ms-2">@modifier.ModifierName</li>
                                        }
                                    </ul>
                                }
                                @if (!string.IsNullOrEmpty(item.Instruction))
                                {
                                    <span class="d-block ms-2 mt-0 text-break"><span class="text-info">Instruction : </span>@item.Instruction</span>
                                }
                            </div>
                        }
                        
                    </div>
                    <div class="overflow-auto" style="background-color: rgba(238,238,238,0.8); min-height:3.5rem; max-height:3.5rem;"> 
                        @if (!string.IsNullOrEmpty(order.Instruction))
                        {
                         <span class="d-block text-break ms-2"><span class="text-info">Order Instruction : </span>@order.Instruction</span>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>
<script>
 function updateTimers() {
        $('.bi-alarm[data-orderdate]').each(function () {
            const $this = $(this);
            const orderDateStr = $this.data('orderdate');
            const orderDate = new Date(orderDateStr);
            const now = new Date();
            const diff = now - orderDate;

            if (diff >= 0) {
                const totalSeconds = Math.floor(diff / 1000);
                const days = Math.floor(totalSeconds / (3600 * 24));
                const hours = Math.floor((totalSeconds % (3600 * 24)) / 3600);
                const minutes = Math.floor((totalSeconds % 3600) / 60);
                const seconds = totalSeconds % 60;

                $this.closest('small').find('.Timer').text(`${days} days ${hours} hours ${minutes} min ${seconds} sec`);
            } else {
                $this.closest('small').find('.Timer').text(`0 min`);
            }
        });
    }

    $(document).ready(function () {
        updateTimers();
        setInterval(updateTimers, 1000);
    });
</script>